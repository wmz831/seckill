<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

  <!--
    现代框架的趋势：约定大于配置
    整合目标：
    1、更少的编码
    2、更少的配置
    3、足够的灵活性

    配置共4步骤：
    1~2：数据库相关配置
    3：Mybaits配置
    4：spring整合mybits配置
  -->

  <!-- 配置整合mybits过程-->
  <!-- 1：配置数据库相关参数 读取property可修改的地址，用${url}引用参数
        system-properties-mode="NEVER"，该属性默认为ENVIRONMENT，所以取到的值是环境变量中的username而不是properties中的username
   -->
  <context:property-placeholder location="classpath:jdbc.properties" system-properties-mode="NEVER"/>

  <!-- 2：数据库连接池 -->
  <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <!-- 配置连接池属性 -->
    <property name="driverClass" value="${driver}"/>
    <property name="jdbcUrl" value="${url}"/>
    <property name="user" value="${username}"/>
    <property name="password" value="${password}"/>

    <!-- c3p0连接池的私有属性 默认属性可以满足大部分情况，所以一般可以不用配置，高并发时调优 -->
    <property name="maxPoolSize" value="30"/>
    <property name="minPoolSize" value="10"/>
    <!-- 关闭连接后部自动commit -->
    <property name="autoCommitOnClose" value="false"/>
    <!-- 获取连接超时时间，当maxPoolSize用满时的等待时间，默认为0，即无限等待 -->
    <property name="checkoutTimeout" value="1000"/>
    <!-- 当获取连接失败时的重试次数 -->
    <property name="acquireRetryAttempts" value="2"/>
  </bean>

  <!-- 3：Mybaits的API SqlSessionFactory对象 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 注入数据库连接池 -->
    <property name="dataSource" ref="dataSource"/>
    <!-- 配置Mybits全局配置文件：mybits-config.xml -->
    <property name="configLocation" value="classpath:mybits-config.xml"/>
    <!-- 扫描entity包，使用别名 eg. org.seckill.entity.Seckill -> Seckill value="entity1;entity2;.."-->
    <property name="typeAliasesPackage" value="org.seckill.entity"/>
    <!-- 扫描sql配置文件：mapper需要的xml文件 -->
    <property name="mapperLocations" value="classpath:mapper/*.xml"/>
  </bean>

  <!-- 4:配置扫描Dao接口包，动态实现Dao接口，并自动注入到spring容器中 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 注入sqlSessionFactory
      这里注意！sqlSessionFactory这个注入方法已过，
      因为时当MapperScannerConfigurer启动时可能会出现properties文件还没有被加载，拿到的dataSource这种的属性值还没有被替换掉，
      所以用法 BeanName 后处理的方式，当用mybits时才会去找对应的sqlSessionFactory，防止它提前初始化sqlSessionFactory
    -->
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    <!-- 给出需要扫描Dao接口包 -->
    <property name="basePackage" value="org.seckill.dao"/>
  </bean>

  <!-- 因为RedisDao不属于Mybatis，没有自动实现Dao接口，所以需要自己去注入RedisDao -->
  <bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
    <constructor-arg index="0" value="${redisIp}"/>
    <constructor-arg index="1" value="${redisPort}"/>
  </bean>

</beans>
